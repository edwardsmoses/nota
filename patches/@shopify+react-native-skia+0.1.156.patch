--- a/node_modules/@shopify/react-native-skia/ios/RNSkia-iOS/SkiaUIView.mm
+++ b/node_modules/@shopify/react-native-skia/ios/RNSkia-iOS/SkiaUIView.mm
@@ -143,32 +143,33 @@
   if (event.type == UIEventTypeTouches) {
     std::vector<RNSkia::RNSkTouchInfo> nextTouches;
     for (UITouch *touch in touches) {
-      auto position = [touch preciseLocationInView:self];
-      RNSkia::RNSkTouchInfo nextTouch;
-      nextTouch.x = position.x;
-      nextTouch.y = position.y;
-      nextTouch.force = [touch force];    
-      nextTouch.id = [touch hash];
-      auto phase = [touch phase];
-      switch(phase) {
-        case UITouchPhaseBegan:
-          nextTouch.type = RNSkia::RNSkTouchInfo::TouchType::Start;
-          break;
-        case UITouchPhaseMoved:
-          nextTouch.type = RNSkia::RNSkTouchInfo::TouchType::Active;
-          break;
-        case UITouchPhaseEnded:
-          nextTouch.type = RNSkia::RNSkTouchInfo::TouchType::End;
-          break;
-        case UITouchPhaseCancelled:
-          nextTouch.type = RNSkia::RNSkTouchInfo::TouchType::Cancelled;
-          break;
-        default:
-          nextTouch.type = RNSkia::RNSkTouchInfo::TouchType::Active;
-          break;
-      }
-      
+      if(touch.type == UITouchTypePencil) {
+        auto position = [touch preciseLocationInView:self];
+        RNSkia::RNSkTouchInfo nextTouch;
+        nextTouch.x = position.x;
+        nextTouch.y = position.y;
+        nextTouch.force = [touch force];    
+        nextTouch.id = [touch hash];
+        auto phase = [touch phase];
+       switch(phase) {
+         case UITouchPhaseBegan:
+           nextTouch.type = RNSkia::RNSkTouchInfo::TouchType::Start;
+           break;
+         case UITouchPhaseMoved:
+           nextTouch.type = RNSkia::RNSkTouchInfo::TouchType::Active;
+           break;
+         case UITouchPhaseEnded:
+           nextTouch.type = RNSkia::RNSkTouchInfo::TouchType::End;
+           break;
+         case UITouchPhaseCancelled:
+           nextTouch.type = RNSkia::RNSkTouchInfo::TouchType::Cancelled;
+           break;
+         default:
+           nextTouch.type = RNSkia::RNSkTouchInfo::TouchType::Active;
+           break;
+       }
       nextTouches.push_back(nextTouch);
+      }
     }
     if(_impl != nullptr) {
       _impl->getDrawView()->updateTouchState(nextTouches);
